name: Auto Move Issues with Pull Requests

on:
  pull_request:
    types: [opened, closed, reopened, synchronize]
  pull_request_review:
    types: [submitted]

jobs:
  move-issues-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Detect Issue ID
        id: extract
        run: |
          ISSUE=""
          # Caso 1: rama con patrón issue-XX
          if [[ "${GITHUB_HEAD_REF}" =~ issue-([0-9]+) ]]; then
            ISSUE="${BASH_REMATCH[1]}"
          fi
          # Caso 2: descripción del PR con #XX
          if [ -z "$ISSUE" ]; then
            ISSUE=$(echo "${{ github.event.pull_request.body }}" | grep -o '#[0-9]\+' | head -1 | tr -d '#')
          fi
          if [ -n "$ISSUE" ]; then
            echo "ISSUE=$ISSUE" >> $GITHUB_ENV
            echo "Detectado Issue #$ISSUE"
          else
            echo "No se encontró Issue asociado."
          fi

      - name: Update Project V2 status
        if: env.ISSUE != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const issue_number = parseInt(process.env.ISSUE);

            const projectId   = "PVT_kwHOCf1UGM4BDHWW";
            const fieldId     = "PVTSSF_lAHOCf1UGM4BDHWWzg1II50";
            const readyId     = "61e4505c";
            const inProgressId= "47fc9ee4";
            const inReviewId  = "df73e18b";
            const doneId      = "98236657";

            // 1. Determinar acción según evento
            let action = null;
            if (context.eventName === "pull_request" && context.payload.action === "opened") {
              action = "inReview";
            }
            if (context.eventName === "pull_request_review" && context.payload.review.state === "changes_requested") {
              action = "ready";
            }
            if (context.eventName === "pull_request" && context.payload.action === "closed") {
              if (context.payload.pull_request.merged) {
                action = "done";
              }
            }

            if (!action) {
              console.log("⚠️ No hay transición definida para este evento.");
              return;
            }

            console.log(`Evento: ${context.eventName} → Transición a: ${action}`);

            // 2. Buscar el item dentro del Project
            const queryItems = `
              query($projectId: ID!, $cursor: String) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: 50, after: $cursor) {
                      pageInfo { hasNextPage endCursor }
                      nodes {
                        id
                        content { ... on Issue { number } }
                      }
                    }
                  }
                }
              }
            `;

            let itemId = null;
            let cursor = null;
            let hasNextPage = true;

            while (hasNextPage) {
              const res = await github.graphql(queryItems, { projectId, cursor });
              const items = res.node.items.nodes;

              for (const item of items) {
                if (item.content && item.content.number === issue_number) {
                  itemId = item.id;
                  break;
                }
              }

              hasNextPage = res.node.items.pageInfo.hasNextPage;
              cursor = res.node.items.pageInfo.endCursor;

              if (itemId) break;
            }

            if (!itemId) {
              console.log(`⚠️ Issue #${issue_number} no encontrado en Project V2`);
              return;
            }

            // 3. Mapear estados
            const valueMap = {
              ready: readyId,
              inProgress: inProgressId,
              inReview: inReviewId,
              done: doneId,
            };

            // 4. Mutación para actualizar Status
            const mutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $valueId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { singleSelectOptionId: $valueId }
                }) {
                  projectV2Item { id }
                }
              }
            `;

            const res = await github.graphql(mutation, {
              projectId,
              itemId,
              fieldId,
              valueId: valueMap[action],
            });

            console.log(`✅ Issue #${issue_number} movido a estado ${action}`);
