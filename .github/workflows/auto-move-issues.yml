name: Auto Move Issues to In Progress

on:
  push:
    branches:
      - develop
      - feature/**
      - issue-**

jobs:
  move-issues:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: Extraer número de Issue del commit
        id: extract
        run: |
          echo "MESSAGE=${{ github.event.head_commit.message }}" >> $GITHUB_ENV
          ISSUE=$(echo "${{ github.event.head_commit.message }}" | grep -o '#[0-9]\+' | head -1 | tr -d '#')
          if [ -n "$ISSUE" ]; then
            echo "ISSUE=$ISSUE" >> $GITHUB_ENV
            echo "Commit detectado con Issue #$ISSUE"
          else
            echo "No se detectó ningún Issue en el commit."
          fi

      - name: Mover Issue a In Progress
        if: env.ISSUE != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const issue_number = parseInt(process.env.ISSUE);
            const projectId = "PVT_kwHOCf1UGM4BDHWW"; // PROJECT_ID
            const fieldId = "PVTSSF_lAHOCf1UGM4BDHWWzg1II50"; // FIELD_ID de Status
            const inProgressId = "47fc9ee4"; // VALUE_ID de "In progress"

            console.log(`Detectado Issue #${issue_number}, buscando en Project V2 ID ${projectId}...`);

            // 1. Buscar todos los items del Project
            const queryItems = `
              query($projectId: ID!, $cursor: String) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: 50, after: $cursor) {
                      pageInfo {
                        hasNextPage
                        endCursor
                      }
                      nodes {
                        id
                        content {
                          ... on Issue {
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;

            let itemId = null;
            let cursor = null;
            let hasNextPage = true;

            while (hasNextPage) {
              const res = await github.graphql(queryItems, { projectId, cursor });
              const items = res.node.items.nodes;

              for (const item of items) {
                if (item.content && item.content.number === issue_number) {
                  itemId = item.id;
                  break;
                }
              }

              hasNextPage = res.node.items.pageInfo.hasNextPage;
              cursor = res.node.items.pageInfo.endCursor;

              if (itemId) break;
            }

            if (!itemId) {
              console.log(`⚠️ No se encontró el Issue #${issue_number} en el Project V2.`);
              return;
            }

            console.log(`Item encontrado en Project con ID: ${itemId}`);

            // 2. Mutación para moverlo a In Progress
            const mutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $valueId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { singleSelectOptionId: $valueId }
                }) {
                  projectV2Item { id }
                }
              }
            `;

            const mutationRes = await github.graphql(mutation, {
              projectId,
              itemId,
              fieldId,
              valueId: inProgressId
            });

            console.log(`✅ Issue #${issue_number} movido a In Progress con éxito`);
            console.log("Resultado de la mutación:", JSON.stringify(mutationRes, null, 2));
